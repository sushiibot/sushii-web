"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

type CachedGuild {
  banner: String
  createdAt: Datetime!
  features: [String]!

  """Reads a single `GuildConfig` that is related to this `CachedGuild`."""
  guildConfigById: GuildConfig

  """Reads and enables pagination through a set of `GuildConfig`."""
  guildConfigsById(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuildConfigCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GuildConfig`."""
    orderBy: [GuildConfigsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildConfigsConnection! @deprecated(reason: "Please use guildConfigById instead")
  icon: String
  id: BigInt!
  name: String!
  splash: String
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `WebUserGuild`."""
  webUserGuildsByGuildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WebUserGuildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WebUserGuild`."""
    orderBy: [WebUserGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUserGuildsConnection!
}

type CachedUser {
  avatarUrl: String!
  discriminator: Int!
  id: BigInt!
  lastChecked: Datetime!
  name: String!
}

"""A `BigInt` edge in the connection."""
type CurrentUserGuildIdEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BigInt` at the end of the edge."""
  node: BigInt
}

"""A connection to a list of `BigInt` values."""
type CurrentUserGuildIdsConnection {
  """
  A list of edges which contains the `BigInt` and cursor to aid in pagination.
  """
  edges: [CurrentUserGuildIdEdge!]!

  """A list of `BigInt` objects."""
  nodes: [BigInt]!

  """The count of *all* `BigInt` you could get from the connection."""
  totalCount: Int!
}

"""A `BigInt` edge in the connection."""
type CurrentUserManagedGuildIdEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BigInt` at the end of the edge."""
  node: BigInt
}

"""A connection to a list of `BigInt` values."""
type CurrentUserManagedGuildIdsConnection {
  """
  A list of edges which contains the `BigInt` and cursor to aid in pagination.
  """
  edges: [CurrentUserManagedGuildIdEdge!]!

  """A list of `BigInt` objects."""
  nodes: [BigInt]!

  """The count of *all* `BigInt` you could get from the connection."""
  totalCount: Int!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type GuildConfig {
  """Reads a single `CachedGuild` that is related to this `GuildConfig`."""
  cachedGuildById: CachedGuild
  disabledChannels: [BigInt]
  id: BigInt!
  inviteGuard: Boolean!
  joinMsg: String
  joinMsgEnabled: Boolean!
  joinReact: String
  leaveMsg: String
  leaveMsgEnabled: Boolean!
  logMember: BigInt
  logMemberEnabled: Boolean!
  logMod: BigInt
  logModEnabled: Boolean!
  logMsg: BigInt
  logMsgEnabled: Boolean!
  maxMention: Int
  msgChannel: BigInt
  muteDmEnabled: Boolean!
  muteDmText: String
  muteDuration: BigInt
  muteRole: BigInt
  prefix: String
  roleChannel: BigInt
  roleConfig: JSON
  roleEnabled: Boolean!
  warnDmEnabled: Boolean!
  warnDmText: String
}

"""
A condition to be used against `GuildConfig` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GuildConfigCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
}

"""
Represents an update to a `GuildConfig`. Fields that are set will be updated.
"""
input GuildConfigPatch {
  disabledChannels: [BigInt]
  id: BigInt
  inviteGuard: Boolean
  joinMsg: String
  joinMsgEnabled: Boolean
  joinReact: String
  leaveMsg: String
  leaveMsgEnabled: Boolean
  logMember: BigInt
  logMemberEnabled: Boolean
  logMod: BigInt
  logModEnabled: Boolean
  logMsg: BigInt
  logMsgEnabled: Boolean
  maxMention: Int
  msgChannel: BigInt
  muteDmEnabled: Boolean
  muteDmText: String
  muteDuration: BigInt
  muteRole: BigInt
  prefix: String
  roleChannel: BigInt
  roleConfig: JSON
  roleEnabled: Boolean
  warnDmEnabled: Boolean
  warnDmText: String
}

"""A connection to a list of `GuildConfig` values."""
type GuildConfigsConnection {
  """
  A list of edges which contains the `GuildConfig` and cursor to aid in pagination.
  """
  edges: [GuildConfigsEdge!]!

  """A list of `GuildConfig` objects."""
  nodes: [GuildConfig!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GuildConfig` you could get from the connection."""
  totalCount: Int!
}

"""A `GuildConfig` edge in the connection."""
type GuildConfigsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GuildConfig` at the end of the edge."""
  node: GuildConfig!
}

"""Methods to use when ordering `GuildConfig`."""
enum GuildConfigsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

enum LevelTimeframe {
  ALL_TIME
  DAY
  MONTH
  WEEK
}

type LogoutPayload {
  success: Boolean
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """
  Use this mutation to logout from your account. Don't forget to clear the client state!
  """
  logout: LogoutPayload

  """Updates a single `GuildConfig` using a unique key and a patch."""
  updateGuildConfig(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGuildConfigInput!
  ): UpdateGuildConfigPayload
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query {
  cachedGuild(id: BigInt!): CachedGuild
  cachedUser(id: BigInt!): CachedUser

  """The currently logged in user (or null if not logged in)."""
  currentUser: WebUser
  currentUserGuildIds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CurrentUserGuildIdsConnection
  currentUserManagedGuildIds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CurrentUserManagedGuildIdsConnection
  guildConfig(id: BigInt!): GuildConfig

  """Reads and enables pagination through a set of `GuildConfig`."""
  guildConfigs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuildConfigCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GuildConfig`."""
    orderBy: [GuildConfigsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildConfigsConnection
  hasManageGuild(permissions: BigInt!): Boolean
  tag(guildId: BigInt!, tagName: String!): Tag

  """Reads and enables pagination through a set of `Tag`."""
  tags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsConnection

  """
  Leaderboard for given timeframe and optional guild. If guild is null, it is the global leaderboard
  """
  timeframeUserLevels(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int
    guildId: BigInt

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    timeframe: LevelTimeframe!
  ): TimeframeUserLevelsConnection
  userLevel(guildId: BigInt!, userId: BigInt!): UserLevel
  userLevelsGlobalCachedUser(userId: BigInt!): CachedUser
  webGuild(id: BigInt!): WebGuild

  """Reads and enables pagination through a set of `WebGuild`."""
  webGuilds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WebGuildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WebGuild`."""
    orderBy: [WebGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebGuildsConnection
  webUser(id: BigInt!): WebUser
  webUserGuild(guildId: BigInt!, userId: BigInt!): WebUserGuild

  """Reads and enables pagination through a set of `WebUserGuild`."""
  webUserGuilds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WebUserGuildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WebUserGuild`."""
    orderBy: [WebUserGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUserGuildsConnection

  """Reads and enables pagination through a set of `WebUser`."""
  webUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WebUserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WebUser`."""
    orderBy: [WebUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUsersConnection
}

type Tag {
  content: String!
  created: Datetime!
  guildId: BigInt!
  ownerId: BigInt!
  tagName: String!
  useCount: BigInt!
}

"""
A condition to be used against `Tag` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TagCondition {
  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `tagName` field."""
  tagName: String
}

"""A connection to a list of `Tag` values."""
type TagsConnection {
  """
  A list of edges which contains the `Tag` and cursor to aid in pagination.
  """
  edges: [TagsEdge!]!

  """A list of `Tag` objects."""
  nodes: [Tag!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Tag` you could get from the connection."""
  totalCount: Int!
}

"""A `Tag` edge in the connection."""
type TagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Tag` at the end of the edge."""
  node: Tag!
}

"""Methods to use when ordering `Tag`."""
enum TagsOrderBy {
  GUILD_ID_ASC
  GUILD_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TAG_NAME_ASC
  TAG_NAME_DESC
}

"""A `TimeframeUserLevelsRecord` edge in the connection."""
type TimeframeUserLevelEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TimeframeUserLevelsRecord` at the end of the edge."""
  node: TimeframeUserLevelsRecord!
}

"""A connection to a list of `TimeframeUserLevelsRecord` values."""
type TimeframeUserLevelsConnection {
  """
  A list of edges which contains the `TimeframeUserLevelsRecord` and cursor to aid in pagination.
  """
  edges: [TimeframeUserLevelEdge!]!

  """A list of `TimeframeUserLevelsRecord` objects."""
  nodes: [TimeframeUserLevelsRecord!]!

  """
  The count of *all* `TimeframeUserLevelsRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""The return type of our `timeframeUserLevels` query."""
type TimeframeUserLevelsRecord {
  avatarUrl: String
  currentLevel: BigInt
  discriminator: Int
  gainedLevels: BigInt
  nextLevelXpProgress: BigInt
  nextLevelXpRequired: BigInt
  userId: BigInt
  username: String
  xp: BigInt
  xpDiff: BigInt
}

"""All input for the `updateGuildConfig` mutation."""
input UpdateGuildConfigInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `GuildConfig` being updated.
  """
  patch: GuildConfigPatch!
}

"""The output of our update `GuildConfig` mutation."""
type UpdateGuildConfigPayload {
  """Reads a single `CachedGuild` that is related to this `GuildConfig`."""
  cachedGuildById: CachedGuild

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GuildConfig` that was updated by this mutation."""
  guildConfig: GuildConfig

  """An edge for our `GuildConfig`. May be used by Relay 1."""
  guildConfigEdge(
    """The method to use when ordering `GuildConfig`."""
    orderBy: [GuildConfigsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildConfigsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type UserLevel {
  guildId: BigInt!
  lastMsg: Datetime!
  msgAllTime: BigInt!
  msgDay: BigInt!
  msgMonth: BigInt!
  msgWeek: BigInt!
  userId: BigInt!
}

type WebGuild {
  createdAt: Datetime!
  icon: String
  id: BigInt!
  name: String!
  updatedAt: Datetime!
}

"""
A condition to be used against `WebGuild` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input WebGuildCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
}

"""A connection to a list of `WebGuild` values."""
type WebGuildsConnection {
  """
  A list of edges which contains the `WebGuild` and cursor to aid in pagination.
  """
  edges: [WebGuildsEdge!]!

  """A list of `WebGuild` objects."""
  nodes: [WebGuild!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `WebGuild` you could get from the connection."""
  totalCount: Int!
}

"""A `WebGuild` edge in the connection."""
type WebGuildsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WebGuild` at the end of the edge."""
  node: WebGuild!
}

"""Methods to use when ordering `WebGuild`."""
enum WebGuildsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A user who can log in to the application."""
type WebUser {
  """Discord avatar hash. Null if user does not have one."""
  avatar: String

  """
  First registered on the application. Is not when a user created their Discord account.
  """
  createdAt: Datetime!

  """Additional profile details extracted from Discord oauth"""
  details: JSON!

  """Discord disciminator of the user."""
  discriminator: Int!

  """Unique identifier for the user. This should match their Discord ID."""
  id: BigInt!

  """If true, the user has elevated privileges."""
  isAdmin: Boolean!
  updatedAt: Datetime!

  """Discord username of the user."""
  username: String!

  """Reads and enables pagination through a set of `WebUserGuild`."""
  webUserGuildsByUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WebUserGuildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WebUserGuild`."""
    orderBy: [WebUserGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUserGuildsConnection!
}

"""
A condition to be used against `WebUser` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input WebUserCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
}

type WebUserGuild {
  """Reads a single `CachedGuild` that is related to this `WebUserGuild`."""
  guild: CachedGuild
  guildId: BigInt!
  manageGuild: Boolean
  owner: Boolean!
  permissions: BigInt!

  """Reads a single `WebUser` that is related to this `WebUserGuild`."""
  user: WebUser
  userId: BigInt!
}

"""
A condition to be used against `WebUserGuild` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input WebUserGuildCondition {
  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt
}

"""A connection to a list of `WebUserGuild` values."""
type WebUserGuildsConnection {
  """
  A list of edges which contains the `WebUserGuild` and cursor to aid in pagination.
  """
  edges: [WebUserGuildsEdge!]!

  """A list of `WebUserGuild` objects."""
  nodes: [WebUserGuild!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `WebUserGuild` you could get from the connection."""
  totalCount: Int!
}

"""A `WebUserGuild` edge in the connection."""
type WebUserGuildsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WebUserGuild` at the end of the edge."""
  node: WebUserGuild!
}

"""Methods to use when ordering `WebUserGuild`."""
enum WebUserGuildsOrderBy {
  GUILD_ID_ASC
  GUILD_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""A connection to a list of `WebUser` values."""
type WebUsersConnection {
  """
  A list of edges which contains the `WebUser` and cursor to aid in pagination.
  """
  edges: [WebUsersEdge!]!

  """A list of `WebUser` objects."""
  nodes: [WebUser!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `WebUser` you could get from the connection."""
  totalCount: Int!
}

"""A `WebUser` edge in the connection."""
type WebUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WebUser` at the end of the edge."""
  node: WebUser!
}

"""Methods to use when ordering `WebUser`."""
enum WebUsersOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}
