"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

type CachedGuild {
  bannerUrl: String
  features: String!
  iconUrl: String
  id: BigInt!
  memberCount: BigInt!
  name: String!
  splashUrl: String
}

type CachedUser {
  avatarUrl: String!
  discriminator: Int!
  id: BigInt!
  lastChecked: Datetime!
  name: String!
}

"""A `BigInt` edge in the connection."""
type CurrentUserGuildIdEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BigInt` at the end of the edge."""
  node: BigInt
}

"""A connection to a list of `BigInt` values."""
type CurrentUserGuildIdsConnection {
  """
  A list of edges which contains the `BigInt` and cursor to aid in pagination.
  """
  edges: [CurrentUserGuildIdEdge!]!

  """A list of `BigInt` objects."""
  nodes: [BigInt]!

  """The count of *all* `BigInt` you could get from the connection."""
  totalCount: Int!
}

"""A `BigInt` edge in the connection."""
type CurrentUserManagedGuildIdEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BigInt` at the end of the edge."""
  node: BigInt
}

"""A connection to a list of `BigInt` values."""
type CurrentUserManagedGuildIdsConnection {
  """
  A list of edges which contains the `BigInt` and cursor to aid in pagination.
  """
  edges: [CurrentUserManagedGuildIdEdge!]!

  """A list of `BigInt` objects."""
  nodes: [BigInt]!

  """The count of *all* `BigInt` you could get from the connection."""
  totalCount: Int!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type GuildConfig {
  disabledChannels: [BigInt]
  id: BigInt!
  inviteGuard: Boolean!
  joinMsg: String
  joinMsgEnabled: Boolean!
  joinReact: String
  leaveMsg: String
  leaveMsgEnabled: Boolean!
  logMember: BigInt
  logMemberEnabled: Boolean!
  logMod: BigInt
  logModEnabled: Boolean!
  logMsg: BigInt
  logMsgEnabled: Boolean!
  maxMention: Int
  msgChannel: BigInt
  muteDmEnabled: Boolean!
  muteDmText: String
  muteDuration: BigInt
  muteRole: BigInt
  prefix: String
  roleChannel: BigInt
  roleConfig: JSON
  roleEnabled: Boolean!
  warnDmEnabled: Boolean!
  warnDmText: String

  """Reads a single `WebGuild` that is related to this `GuildConfig`."""
  webGuildByConfigId: WebGuild

  """Reads and enables pagination through a set of `WebGuild`."""
  webGuildsByConfigId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WebGuildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WebGuild`."""
    orderBy: [WebGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebGuildsConnection! @deprecated(reason: "Please use webGuildByConfigId instead")
}

"""
A condition to be used against `GuildConfig` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GuildConfigCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
}

"""A connection to a list of `GuildConfig` values."""
type GuildConfigsConnection {
  """
  A list of edges which contains the `GuildConfig` and cursor to aid in pagination.
  """
  edges: [GuildConfigsEdge!]!

  """A list of `GuildConfig` objects."""
  nodes: [GuildConfig!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GuildConfig` you could get from the connection."""
  totalCount: Int!
}

"""A `GuildConfig` edge in the connection."""
type GuildConfigsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GuildConfig` at the end of the edge."""
  node: GuildConfig!
}

"""Methods to use when ordering `GuildConfig`."""
enum GuildConfigsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

enum LevelTimeframe {
  ALL_TIME
  DAY
  MONTH
  WEEK
}

type LogoutPayload {
  success: Boolean
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """
  Use this mutation to logout from your account. Don't forget to clear the client state!
  """
  logout: LogoutPayload
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query {
  cachedGuild(id: BigInt!): CachedGuild
  cachedUser(id: BigInt!): CachedUser

  """The currently logged in user (or null if not logged in)."""
  currentUser: WebUser
  currentUserGuildIds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CurrentUserGuildIdsConnection
  currentUserManagedGuildIds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CurrentUserManagedGuildIdsConnection
  guildConfig(id: BigInt!): GuildConfig

  """Reads and enables pagination through a set of `GuildConfig`."""
  guildConfigs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuildConfigCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GuildConfig`."""
    orderBy: [GuildConfigsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildConfigsConnection
  hasManageGuild(permissions: BigInt!): Boolean

  """
  Leaderboard for given timeframe and optional guild. If guild is null, it is the global leaderboard
  """
  timeframeUserLevels(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int
    guildId: BigInt

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    timeframe: LevelTimeframe!
  ): TimeframeUserLevelsConnection
  userLevel(guildId: BigInt!, userId: BigInt!): UserLevel
  userLevelsGlobalCachedUser(userId: BigInt!): CachedUser

  """Reads and enables pagination through a set of `UserLevelsGlobal`."""
  userLevelsGlobals(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLevelsGlobalCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserLevelsGlobal`."""
    orderBy: [UserLevelsGlobalsOrderBy!] = [NATURAL]
  ): UserLevelsGlobalsConnection
  webGuild(id: BigInt!): WebGuild
  webGuildByConfigId(configId: BigInt!): WebGuild

  """Reads and enables pagination through a set of `WebGuild`."""
  webGuilds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WebGuildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WebGuild`."""
    orderBy: [WebGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebGuildsConnection
  webUser(id: BigInt!): WebUser

  """Reads and enables pagination through a set of `WebUser`."""
  webUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WebUserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WebUser`."""
    orderBy: [WebUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUsersConnection
}

"""A `TimeframeUserLevelsRecord` edge in the connection."""
type TimeframeUserLevelEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TimeframeUserLevelsRecord` at the end of the edge."""
  node: TimeframeUserLevelsRecord!
}

"""A connection to a list of `TimeframeUserLevelsRecord` values."""
type TimeframeUserLevelsConnection {
  """
  A list of edges which contains the `TimeframeUserLevelsRecord` and cursor to aid in pagination.
  """
  edges: [TimeframeUserLevelEdge!]!

  """A list of `TimeframeUserLevelsRecord` objects."""
  nodes: [TimeframeUserLevelsRecord!]!

  """
  The count of *all* `TimeframeUserLevelsRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""The return type of our `timeframeUserLevels` query."""
type TimeframeUserLevelsRecord {
  avatarUrl: String
  currentLevel: BigInt
  discriminator: Int
  gainedLevels: BigInt
  nextLevelXpProgress: BigInt
  nextLevelXpRequired: BigInt
  userId: BigInt
  username: String
  xp: BigInt
  xpDiff: BigInt
}

type UserLevel {
  guildId: BigInt!
  lastMsg: Datetime!
  msgAllTime: BigInt!
  msgDay: BigInt!
  msgMonth: BigInt!
  msgWeek: BigInt!
  userId: BigInt!
}

"""
Global leaderboard for user levels. All XP in each guild is aggregated for each user.
"""
type UserLevelsGlobal {
  avatarUrl: String
  currentLevel: BigInt
  discriminator: Int
  name: String
  nextLevelXpProgress: BigFloat
  nextLevelXpRequired: BigFloat
  userId: BigInt
  xp: BigFloat
}

"""
A condition to be used against `UserLevelsGlobal` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserLevelsGlobalCondition {
  """Checks for equality with the object’s `userId` field."""
  userId: BigInt
}

"""A connection to a list of `UserLevelsGlobal` values."""
type UserLevelsGlobalsConnection {
  """
  A list of edges which contains the `UserLevelsGlobal` and cursor to aid in pagination.
  """
  edges: [UserLevelsGlobalsEdge!]!

  """A list of `UserLevelsGlobal` objects."""
  nodes: [UserLevelsGlobal!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `UserLevelsGlobal` you could get from the connection.
  """
  totalCount: Int!
}

"""A `UserLevelsGlobal` edge in the connection."""
type UserLevelsGlobalsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserLevelsGlobal` at the end of the edge."""
  node: UserLevelsGlobal!
}

"""Methods to use when ordering `UserLevelsGlobal`."""
enum UserLevelsGlobalsOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
}

type WebGuild {
  """Reads a single `GuildConfig` that is related to this `WebGuild`."""
  config: GuildConfig
  configId: BigInt
  createdAt: Datetime!
  icon: String
  id: BigInt!
  name: String!
  updatedAt: Datetime!
}

"""
A condition to be used against `WebGuild` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input WebGuildCondition {
  """Checks for equality with the object’s `configId` field."""
  configId: BigInt

  """Checks for equality with the object’s `id` field."""
  id: BigInt
}

"""A connection to a list of `WebGuild` values."""
type WebGuildsConnection {
  """
  A list of edges which contains the `WebGuild` and cursor to aid in pagination.
  """
  edges: [WebGuildsEdge!]!

  """A list of `WebGuild` objects."""
  nodes: [WebGuild!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `WebGuild` you could get from the connection."""
  totalCount: Int!
}

"""A `WebGuild` edge in the connection."""
type WebGuildsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WebGuild` at the end of the edge."""
  node: WebGuild!
}

"""Methods to use when ordering `WebGuild`."""
enum WebGuildsOrderBy {
  CONFIG_ID_ASC
  CONFIG_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A user who can log in to the application."""
type WebUser {
  """Discord avatar hash. Null if user does not have one."""
  avatar: String

  """
  First registered on the application. Is not when a user created their Discord account.
  """
  createdAt: Datetime!

  """Additional profile details extracted from Discord oauth"""
  details: JSON!

  """Discord disciminator of the user."""
  discriminator: Int!

  """Unique identifier for the user. This should match their Discord ID."""
  id: BigInt!

  """If true, the user has elevated privileges."""
  isAdmin: Boolean!
  updatedAt: Datetime!

  """Discord username of the user."""
  username: String!
}

"""
A condition to be used against `WebUser` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input WebUserCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
}

"""A connection to a list of `WebUser` values."""
type WebUsersConnection {
  """
  A list of edges which contains the `WebUser` and cursor to aid in pagination.
  """
  edges: [WebUsersEdge!]!

  """A list of `WebUser` objects."""
  nodes: [WebUser!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `WebUser` you could get from the connection."""
  totalCount: Int!
}

"""A `WebUser` edge in the connection."""
type WebUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WebUser` at the end of the edge."""
  node: WebUser!
}

"""Methods to use when ordering `WebUser`."""
enum WebUsersOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}
