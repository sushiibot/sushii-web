"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""A `BigInt` edge in the connection."""
type CurrentUserGuildIdEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BigInt` at the end of the edge."""
  node: BigInt
}

"""A connection to a list of `BigInt` values."""
type CurrentUserGuildIdsConnection {
  """
  A list of edges which contains the `BigInt` and cursor to aid in pagination.
  """
  edges: [CurrentUserGuildIdEdge!]!

  """A list of `BigInt` objects."""
  nodes: [BigInt]!

  """The count of *all* `BigInt` you could get from the connection."""
  totalCount: Int!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""All input for the `logout` mutation."""
input LogoutInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `logout` mutation."""
type LogoutPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  logout(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LogoutInput!
  ): LogoutPayload
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query {
  """The currently logged in user (or null if not logged in)."""
  currentUser: WebUser
  currentUserGuildIds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CurrentUserGuildIdsConnection

  """
  Handy method to get the current user ID for use in RLS policies, etc; in GraphQL, use `currentUser{id}` instead.
  """
  currentUserId: BigInt
  webGuild(id: BigInt!): WebGuild

  """Reads and enables pagination through a set of `WebGuild`."""
  webGuilds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WebGuildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WebGuild`."""
    orderBy: [WebGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebGuildsConnection
  webUser(id: BigInt!): WebUser

  """Reads and enables pagination through a set of `WebUser`."""
  webUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WebUserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WebUser`."""
    orderBy: [WebUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUsersConnection
}

type WebGuild {
  createdAt: Datetime!
  iconUrl: String
  id: BigInt!
  name: String!
  updatedAt: Datetime!
}

"""
A condition to be used against `WebGuild` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input WebGuildCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
}

"""A connection to a list of `WebGuild` values."""
type WebGuildsConnection {
  """
  A list of edges which contains the `WebGuild` and cursor to aid in pagination.
  """
  edges: [WebGuildsEdge!]!

  """A list of `WebGuild` objects."""
  nodes: [WebGuild!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `WebGuild` you could get from the connection."""
  totalCount: Int!
}

"""A `WebGuild` edge in the connection."""
type WebGuildsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WebGuild` at the end of the edge."""
  node: WebGuild!
}

"""Methods to use when ordering `WebGuild`."""
enum WebGuildsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A user who can log in to the application."""
type WebUser {
  """Discord avatar hash. Null if user does not have one."""
  avatar: String

  """
  First registered on the application. Is not when a user created their Discord account.
  """
  createdAt: Datetime!

  """Additional profile details extracted from Discord oauth"""
  details: JSON!

  """Discord disciminator of the user."""
  discriminator: Int!

  """Unique identifier for the user. This should match their Discord ID."""
  id: BigInt!

  """If true, the user has elevated privileges."""
  isAdmin: Boolean!
  updatedAt: Datetime!

  """Discord username of the user."""
  username: String!
}

"""
A condition to be used against `WebUser` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input WebUserCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
}

"""A connection to a list of `WebUser` values."""
type WebUsersConnection {
  """
  A list of edges which contains the `WebUser` and cursor to aid in pagination.
  """
  edges: [WebUsersEdge!]!

  """A list of `WebUser` objects."""
  nodes: [WebUser!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `WebUser` you could get from the connection."""
  totalCount: Int!
}

"""A `WebUser` edge in the connection."""
type WebUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WebUser` at the end of the edge."""
  node: WebUser!
}

"""Methods to use when ordering `WebUser`."""
enum WebUsersOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}
